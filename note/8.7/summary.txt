Monday:
- git and docker download
- addicted to reading English (lose track of time)

Tuesday:
- I bought the TOFEL spoken English book and changed 
  my reading time to the way to company and back
  (I will not record it following, but I try to keep reading one hour a day)

- review the command of git operation

    git init
    git add README.txt
    git commit -m "git review"
    git branch -M newBranch
    git push -u origin newBranch

    git status  //check git status
    
    (github address: https://github.com/yangts0955/gitTest.git)

    PS: It is simple and needn't to download. 
    I will use it to learn how to backup, restore and merge code version in future 
    because of using less at my past project

- pull mysql in docker and create mysql docker container

    docker pull mysql
    (!) docker run -p 3307:3307 --name mysql-test -e MYSQL_ROOT_PASSWORD=root -d mysql
    (port 3306 has been taken up by host mysql, so i try to use port 3307)
    (But there is a mistake in this conmmand, i do not realize it now)

Wednesday:
- initialize the springboot project and load JPA, lombok and JWT dependencies,
  
- create the controller, service and repository folders and corresponding files
  (named testController, testService and testRepository which are used to test connection)

  (github address: https://github.com/yangts0955/bookstore.git)
  (I use it to write bookstore project directly, and have not deleted the test part)

Thursday:
- failed to connect mysql database in docker container !!!

    summary:
    Problem:
    because pop message shows that no response from server with connection by port 3307,
    i try to use docker host address 172.20.96.1 and 127.0.0.1
    but still no response from 127.0.0.1:3307 and cannot connect to 172.20.96.1

    if i try to use port 3306, it can connect host mysql database
    but certainly it cannot find specific database created in docker container.

    Solution:
    After talking with my friend, i realize that the problem was in the port mapping
    from host to virtual docker container.

    i mapped host port 3307 to docker port 3307 which should be 3306 for mysql database. 
    So, the command to create mysql docker container should be 

        docker run -p 3307:3306 --name mysql-test -e MYSQL_ROOT_PASSWORD=root -d mysql
    
    i ignored the meaning of -p parameter due to my carelessness :(.

    during the time, i downloaded navicat for better testing the connection, 
    and struggle with this problem for two hours :( , it is not worth.

Friday:
- succeed to connect mysql database in docker !

    - the command to connect mysql with the domain address except "localhost"
    ALTER USER 'root'@'%' IDENTIFIED WITH mysql_native_password BY 'root';

- postman downloaded and api test successfully.
    A notice: java application file and controller folder must be in the same folder.

- "bookstore" database and "book" table created and insert some test data.

    some commands recording for easy use:
    
    - the command to add default value to column
    alter table table_name alter column column_name set default 'default_value';

    - the command to add new column
    alter table table_name add column_name varchar(255) comment '新增字段';

    - the command to modify the column
    alter table table_name modify column_name modify_column varchar(2000) comment '修改';

Saturday:
- api implementation
    - add new book api implementation
    - add book implementation
    - get book by id implementation
    - get all book list implementation

    (github address: https://github.com/yangts0955/bookstore.git) 

Sunday:
- note summary


! Questions:
- what the meaning of postman api test scripts?
    i catch some screenshot pictures stored in images folder, is that okay?

- i write add-new-book and add-book api in one method
    i judged that if new book's title and author matched one of books in database,
    it added new book's count to book's total_count, else add new book.
    Is that okay? because i think it may hard to judge in front-end
    If needed, I will separate them.

- If possible, I would like to have a more detailed documentation 
  of the remaining API interfaces, or i will write it first with my idea.

Future learning plan:
- need to achieve:
    Exception Handler (mostly okay)
    JWT and session
    Sping JUnit (help!!!)
    Redis maybe
    docker compose (seems not hard, though not familar)

- need to learn:
    Spring security
    Spring HATEOAS
    (i found some materials by myself, but more is better)

(i planned it according to the bookstore project document. if needed, it can be added)

Some other commands recorded for easy use in the future, and hope to request for your guidance

- command to create table
create table book(
    id int NOT NULL PRIMARY KEY AUTO_INCREMENT,
    author varchar(255),
    title varchar(255), 
    category varchar(255), 
    price varchar(255), 
    total_count int, 
    sold int
    )ENGINE=InnoDB DEFAULT CHARSET=utf8;

- command to insert data
    insert into book values(1,"Neil","title-test","category-test","99999.99",9999,50);

- command to delete data
    delete from book where id = 1;


